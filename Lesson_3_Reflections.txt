Lesson 3 Reflections

3.4 What happens when you initialize a repository? Why do you need to do it?

-  A Repository is initialized in Git using the "git init" command.
-  This creates a hidden folder named '.git' in the directory where the command was executed.
-  This folder contains all the metadata associated with a Git Repository.
-  From this point on, all files in the parent directory (and its sub-directories) can be tracked for changes.
-  Without initializing a Repository, Git has no way of tracking history and changes.
-  Initializing does not create a commit, since the user may not want all files within the directory to be added to the Repository.
-  Also, the user wouldn't have the opportunity to add a comment to a commit created upon initialization.
-  Running the "git status" command shows all files that are untracked and available for committing into the Repository.

3.7 How is the staging area different from the working directory and the repository? What value do you think it offers?

-  The Working Directory is simply the directory where the user is currently working.
-  The Working Directory is part of the Operating System's file system and not part of Git.
-  A Repository is a collection of files within a parent directory (and its sub-directories) that are tied to single Git instance.
-  A Repository consists of the contents of the working (parent) directory, its sub-directories and the '.git' folder with change history metadata.
-  The Working Directory can contain multiple files with multiple logical changes.
-  The Staging Area provides a temporary stage wherein the user can add changes one logical step at a time, instead of the entire contents of the working directory.
-  Files can be added one a time to the Staging Area using the "git add" command.
-  The user can then check the contents of the Staging Area using the "git status" command to ensure only the desired changes will be committed.
-  The Staging Area provides the option to commit one logical change a time within a large Working Directory.
-  The Staging Area provides the ability to double check the contents of a logical before making a commit.
-  The "git reset" command allows files to be removed from the Staging Area is the contents are too large for a single commit.

3.12 How can you use the staging area to make sure you have one commit per logical change?

-  At any given time, you can use the "git status" command to check if any changes have been made since the last commit.
-  If changes have been made, the changed file(s) can be added to the Staged Area one at a time using the "git add" command.
-  Now, you can use the "git diff" command to check for changes between the Working Directory and the Staged Area.
-  Additionally, you can use the "git diff --staged" command to check for changes between the Staged Area and the latest commit.
-  By comparing the results between these two commands, we can verify whether the difference between the Staged Area and latest Repository commit is one logical change.
-  This is particularly helpful if more than one file has been changed since the latest commit, but only one logical change is desired, meaning the rest can be discarded.
-  At this point, we can run the "git commit" command to commit the changes present in the staging area.
-  Running the "git diff" command again after the commit will show any pending changes lying in the Working Directory, which can be discarded using the "git reset --hard".
-  Note that the "git reset --hard" will discard any pending changes in the Staging Area and Working Directory at the time of execution, so it is imperative to commit the desired changes in the Staging Area before running this command.
-  There is no way to recover changes that are lost by running the "git reset --hard" command, so it must be used with caution.
-  Adding desired changes to the Staging Area and using the various forms of the "git diff" command helps evaluate whether we're committing more than one logical change at a time.
-  As a final sanity check, it is recommended to run the "git diff" command one last time to ensure no results are returned, meaning that the desired change has been committed and the remaining changes have been discarded.

3.15 What are some situations when branches would be helpful in keeping your history organized? How would branches help?

-  Every Git Repository comes with a single branch, called "master" by default.
-  The "git branch" command allows us to check for existing branches as well as create new ones.
-  Each branch has a unique ID for each of its commits, but branches also have labels that are easy for human comprehension.
-  Also just like commits, branches can be checked out. You will be checking out the tip (the latest commit) of the branch.
-  Users can label branches (just like commit messages) to help organize their work and navigate through history.
-  If the changes made to a branch are not successful, the user can simply revert back to the master branch and discard the branch.
-  If the changes made to a branch are successful, the branch can be merged back into the master branch, even if the master branch has been updated since the initial branching.
-  Branches are useful for: -
--  Testing Features that are not ready for Production, but are complex enough to need more than one commit.
--  Creating different versions of the same Feature, for testing purposes, before committing to any changes.
--  Collaborating with multiple developers, where each developer can have their own branch so as to work independently of each other.
--  Working on several different features at once and independently of each other, while ensuring a working version of the Feature is retained in the master branch.
--  Keeping the development process agile by avoiding implementing peripheral, skeletal features like toggle buttons until a later stage.
-  Git allows you to have multiple branches for the same commit. In this case any changes made henceforth will only be added to the branch that is currently checked out.
-  Branches are commonly used for context switching (if the current feature contains a bug, you can create a separate branch for the bug and leave the existing branch to concentrate of the feature).
-  Common use cases for branches: Production, Development, Experimental, Feature-specific, Bug-specific.

3.20 How do the diagrams help you visualize the branch structure?

-  Diagrams help identify how many branches are present within a particular Repository.
-  Diagrams show the point at which a particular branch was diverted out of the master branch.
-  Diagrams show the commits within the master branch that do not belong to a particular branch, since they were committed after the branching.
-  Diagrams show the point at which a branch was merged back into master.
-  Diagrams help us keep track of the Reachability of each commit to its parent.
-  Diagrams help us spot outlying commits that have sprouted out by committing changes to an older (top tip) commit within a branch, which would be lost if not added to its own new branch.
-  Diagrams help us to visualize the structure of the Repository so that we can make sure that we are committing changes correctly and as desired.
-  All these features help us in creating and maintaining clean and organized Repositories, where collaborating, adding new features and identifying and fixing bugs is easy and intuitive.

3.25 What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

-  The "git merge" command is used to merge branches together.
-  Git will merge the branches mentioned in the merge command (order does not matter) into the branch that is currently checked out.
-  The checked out branch does not need to be mentioned in the merge command, but it is best practice to do so in order to mentally visualize the merge process and prevent mistakes.
-  Once the command is run, Git will compare the tip of each branch (ie. the latest commit) with the common parent and merge the changes.
-  All commits within all branches being merged (you can merge more than two branches) will be retained via the Reachability rule.
-  Commits will show up in chronological order in the Git Log.
-  Therefore, "git diff" between consecutive commits may not always make sense or be helpful.
-  In order to check only the changes added via a particular commit, you can use the "git show" command, which compares any commit with its parent (user does not need to know the parent).
-  Once merged, the new tip will take the name of the checked out branch.
-  The other branch label can be removed with the "git branch -d" command. This only deletes the label. All branch commits are retained as part of the merge.
-  Since the Git Log only shows commits in chronological order, it helps to maintain a diagram to visually differentiate between commits of the two branches before the merge.

3.32 What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

-  Git uses automatic merging when it doesn't detect any conflicts between changes in files in either branch being merged.
-  If a conflict is detected, Git highlights it within the file(s) in question and relies on the user to resolve the conflict manually.
-  Pros
--  Increases development efficiency by automatically merging all unrelated changes without needing user intervention.
--  For conflicts that aren't obvious, or where multiple solutions are possible, providing the option for users to decide is crucial.
--  Most Repositories are collaborative projects and having the option to manually resolve conflicts can ensure each user's intentions are accounted for.
-  Cons
--  Using a standard algorithm to determine conflicts can create issues in edge scenarios.
--  An auto-merge could lead to an undesired outcome. Although the merge can be reverted, it may be difficult to troubleshoot the issue without visibility into what was executed by the auto-merge.
--  Complex Repositories may have too many conflicts that may be tedious to evaluate manually. A smarter auto-merging algorithm could mitigate the pain in such situations.
