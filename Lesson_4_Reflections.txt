4.7 When would you want to create a remote Repository rather than keeping all your work local?

-  Keeping work local makes it hard to collaborate with others.
-  Once work in the local Repository is bug-free and Production ready, it makes sense to create a remote version.
-  This remote Repository can then be pushed to a collaborative environment like GitHub.
-  Also, other collaborators will do the same with their local Repositories.
-  In this way the collaborative work with them be hosted on GitHub.
-  Individual developers can then pull the combined Repository to their local machines to do their own testing and further development.

4.10 Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

-  The value of having remote Repositories is to enable collaboration with other Developers.
-  This means that the remote Repository could contain changes or new code that may not be compatible with your local Repository.
-  Therefore, it is safer to let users manually pull changes from the remote Repository to their local Repository after they have verified that the changes are compatible.
-  Also, automatically pulling in changes every time there is a new commit to the remote Repository could create a lot of extra, unwanted commits, making the Project difficult to track.
-  Furthermore, if the local Repository has multiple active branches and the one currently checked out doesn't exist on the remote Repository, an automatic pull could fail with errors.
-  Similarly, pushing changes from a local Repository to a remote Repository should also be a manual process, ensuring bug-free and compatible code is pushed to a collaborative space.

4.14 Describe the differences between forks, clones, and branches. When would you use one instead of another?

-  Branches are different commit paths within the same local Repository.
-  Branches are used for various tasks: testing new features, fixing bugs, experimenting with existing features, collaborating with peers locally, et cetera.
-  Clones are used to copy existing Repositories, either locally on the same machine, or from a collaborative space, such as GitHub, to a local machine.
-  Clones allow developers to checkout a local copy of a collaborative Repository, so that each developer can work independently, without breaking the master copy.
-  Repositories are cloned when each developer has permissions to contribute changes to the original Repository.
-  Forking is a form of cloning where GitHub makes a clone of an existing remote Repository on GitHub itself, except in the forker's account.
-  Forking is used to allow developers to maintain their own versions of a remote Repository on their account, when they do not have permissions to contribute changes to the original remote Repository.
-  Forking also provides the original author with credit for allowing other developers to use his/her Repository for their personal use.
-  While developers forking a Repository do not have permissions to manually edit the original Repository, GitHub provides a way for them to request changes/improvements to the original author.

4.22 What is the benefit of having a copy of the last known state of the remote stored locally?

-  A remote Repository can only be accessed when your local machine is online.
-  If you plan to go offline and continue working, it makes sense to fetch the latest version of the remote Repository to your local machine.
-  This way, when you come back online at a later time, you can simply run the "git fetch" command again and see what has changed remotely.
-  Using "git fetch" will store the latest version of the remote Repository at the 'origin/master' branch, so you can continue to make local changes without merging the remote changes until you're ready to do so.
-  Then, when ready, the 'origin/master' and 'master' branches can me merged using "git merge".
